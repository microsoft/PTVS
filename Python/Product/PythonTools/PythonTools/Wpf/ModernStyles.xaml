<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:img="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"
                    xmlns:theming="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"
                    xmlns:util="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Utilities"
                    xmlns:vsm="clr-namespace:System.Windows;assembly=PresentationFramework"
                    xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
                    xmlns:l="clr-namespace:Microsoft.PythonTools.Wpf"
                    xmlns:wpf="clr-namespace:Microsoft.VisualStudioTools.Wpf">

    <Style x:Key="FocusVisualStyle" TargetType="{x:Type Control}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               RenderOptions.EdgeMode="Aliased"
                               Stroke="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}"
                               StrokeThickness="1"
                               StrokeDashArray="1 1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EllipseFocusVisualStyle" TargetType="{x:Type Control}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Ellipse Margin="2"
                             RenderOptions.EdgeMode="Aliased"
                             Stroke="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}"
                             StrokeThickness="1"
                             StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconPath" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}" />
        <Setter Property="MaxWidth" Value="10" />
        <Setter Property="MaxHeight" Value="10" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Stretch" Value="Uniform" />
    </Style>

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderKey}}" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="2" />
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Margin" Value="0" />
    </Style>

    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                Grid.Row="0" Grid.Column="0"
                                                Margin="{TemplateBinding Padding}"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"/>

                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Orientation="Vertical"
                                   Grid.Column="1"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Grid.Column="0"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BulletedLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Padding" Value="1" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Ellipse Grid.Column="0"
                                 Height="{Binding ActualWidth,RelativeSource={RelativeSource Self}}"
                                 MinWidth="4"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="Top"
                                 Margin="5"
                                 Fill="{Binding Foreground,RelativeSource={RelativeSource FindAncestor,AncestorType=Label}}" />

                        <!-- Em-space for sizing the bullet point -->
                        <TextBlock Grid.Column="0" Visibility="Hidden" Text="M" />
                        <TextBlock Grid.Column="1" TextWrapping="Wrap" Text="{Binding}" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Control}" x:Key="ControlNoHover">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ControlForegroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundColorKey}}" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderSelectedKey}}" />
                <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundSelectedColorKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundDisabledKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ControlForegroundDisabledKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderDisabledKey}}" />
                <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundDisabledColorKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Control}" BasedOn="{StaticResource ControlNoHover}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundHoverKey}}" />
                <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundHoverColorKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- This style should match Control as much as possible -->
    <Style x:Key="ControlLike" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundColorKey}}" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderSelectedKey}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundHoverKey}}" />
                <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundHoverColorKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundDisabledKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderDisabledKey}}" />
                <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundDisabledColorKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TooltipBorder" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.TooltipBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.TooltipBackgroundKey}}" />
        <Setter Property="BorderThickness" Value="4" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.TooltipTextKey}}" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.TooltipBackgroundColorKey}}" />
    </Style>

    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.TooltipBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.TooltipBackgroundKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.TooltipTextKey}}" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.TooltipBackgroundColorKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border x:Name="Root"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          TextElement.Foreground="{TemplateBinding TextElement.Foreground}"
                                          Cursor="{TemplateBinding Cursor}"
                                          Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InfoPanel" TargetType="{x:Type Panel}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.InfoBackgroundKey}}" />
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.InfoTextKey}}" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.InfoBackgroundColorKey}}" />
    </Style>

    <Style x:Key="InfoText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.InfoTextKey}}" />
    </Style>

    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Margin" Value="6" />
        <Setter Property="Padding" Value="6 3" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.BackgroundKey}}" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.BackgroundColorKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Rectangle Grid.Row="1"
                                   Grid.RowSpan="2"
                                   Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="1" />

                        <Border Grid.Row="0"
                                Grid.RowSpan="2"
                                Margin="3"
                                HorizontalAlignment="Left"
                                Background="{TemplateBinding Background}">
                            <ContentPresenter ContentSource="Header"
                                              Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True" />
                        </Border>

                        <ContentPresenter Grid.Row="3"
                                          Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ControlForegroundDisabledKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderDisabledKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Static l:ModernStyles.ThemedDialogButtonStyleKey}}">
        <Setter Property="Margin" Value="6" />
        <Setter Property="Padding" Value="6 3" />
        <Style.Triggers>
            <Trigger Property="Command" Value="ApplicationCommands.Close">
                <Setter Property="IsCancel" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PopupExpander" TargetType="{x:Type Expander}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Header">
            <Setter.Value>
                <Path Style="{StaticResource IconPath}"
                      Data="F1M8,16.5768737792969L16,24.5768737792969 24,16.5768737792969 24,21.9206237792969 16,29.9206237792969 8,21.9206237792969 8,16.5768737792969z" />
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="8" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource EllipseFocusVisualStyle}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="ExpanderButton" TargetType="{x:Type ToggleButton}">
                            <Grid DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type Expander}}}">
                                <Ellipse Stroke="{Binding BorderBrush}"
                                         StrokeThickness="1"
                                         Fill="{Binding Background}"
                                         MinWidth="{Binding ActualHeight,RelativeSource={RelativeSource Self}}"
                                         MinHeight="{Binding ActualWidth,RelativeSource={RelativeSource Self}}" />

                                <ContentPresenter Focusable="False"
                                                  RecognizesAccessKey="True"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Margin="{TemplateBinding Padding}" />
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid Margin="{TemplateBinding Margin}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition x:Name="ContentRow" Height="0" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                        </Grid.ColumnDefinitions>
                        <ToggleButton x:Name="ExpanderButton"
                                      Grid.Row="0"
                                      Foreground="{TemplateBinding Foreground}"
                                      Content="{TemplateBinding Header}"
                                      ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                      ContentTemplate="{TemplateBinding HeaderTemplate}"
                                      ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                      HorizontalContentAlignment="Center"
                                      VerticalContentAlignment="Center"
                                      Template="{StaticResource ExpanderButton}"
                                      Padding="{TemplateBinding Padding}"
                                      FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                                      IsChecked="{Binding IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter x:Name="Content" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding DesiredHeight,ElementName=Content}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundHoverKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderHoverKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ControlForegroundHoverKey}}" />
                <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundHoverColorKey}}" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderSelectedKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Static l:ModernStyles.ThemedDialogTextBoxStyleKey}}">
        <Style.Triggers>
            <Trigger Property="AcceptsReturn" Value="False">
                <Setter Property="VerticalContentAlignment" Value="Center" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- see also https://msdn.microsoft.com/en-us/library/ms752048(v=vs.100).aspx -->
    <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource ControlNoHover}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.TreeViewBackgroundKey}}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border Name="Border" 
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
                            <ItemsPresenter KeyboardNavigation.IsTabStop="True" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.TreeViewForegroundKey}}" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid Background="{x:Null}" Margin="{TemplateBinding Margin}" FocusVisualStyle="{x:Null}">
                        <vsm:VisualStateManager.VisualStateGroups>
                            <vsm:VisualStateGroup x:Name="CommonStates">
                                <vsm:VisualState x:Name="Normal" />
                                <vsm:VisualState x:Name="MouseOver" />
                                <vsm:VisualState x:Name="Pressed" />
                                <vsm:VisualState x:Name="Disabled" />
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="SelectionStates">
                                <vsm:VisualState x:Name="Unselected" />
                                <vsm:VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Selection" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame Value="{DynamicResource {x:Static l:ModernStyles.TreeViewItemSelectedBackgroundKey}}" KeyTime="0" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Header" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame Value="{DynamicResource {x:Static l:ModernStyles.TreeViewItemSelectedForegroundKey}}" KeyTime="0" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="SelectedInactive">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Selection" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame Value="{DynamicResource {x:Static l:ModernStyles.TreeViewItemInactiveSelectedBackgroundKey}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="HasItemsStates">
                                <vsm:VisualState x:Name="HasItems" />
                                <vsm:VisualState x:Name="NoItems">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpanderButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                            <vsm:VisualStateGroup x:Name="ExpansionStates">
                                <vsm:VisualState x:Name="Collapsed" />
                                <vsm:VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <ToggleButton x:Name="ExpanderButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsTabStop="False"
                                      IsChecked="{Binding IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Foreground="{TemplateBinding Foreground}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Grid x:Name="Root" Background="Transparent">
                                        <vsm:VisualStateManager.VisualStateGroups>
                                            <vsm:VisualStateGroup x:Name="CommonStates">
                                                <vsm:VisualState x:Name="Normal" />
                                                <vsm:VisualState x:Name="MouseOver" />
                                                <vsm:VisualState x:Name="Disabled" />
                                            </vsm:VisualStateGroup>
                                            <vsm:VisualStateGroup x:Name="CheckStates">
                                                <vsm:VisualState x:Name="Unchecked" />
                                                <vsm:VisualState x:Name="Checked">
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="UncheckedVisual" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                                        <DoubleAnimation Storyboard.TargetName="CheckedVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                                    </Storyboard>
                                                </vsm:VisualState>
                                            </vsm:VisualStateGroup>
                                        </vsm:VisualStateManager.VisualStateGroups>
                                        <Grid HorizontalAlignment="Right" Margin="2 2 5 2">
                                            <Path x:Name="UncheckedVisual"
                                                  Width="6" Height="9"
                                                  Stroke="{TemplateBinding Foreground}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Right"
                                                  Data="M 0,0 L 0,9 L 5,4.5 Z"
                                                  StrokeThickness="1" StrokeLineJoin="Miter" />
                                            <Path x:Name="CheckedVisual"
                                                  Opacity="0"
                                                  Width="6" Height="6"
                                                  Fill="{TemplateBinding Foreground}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center"
                                                  Data="M 6,0 L 6,6 L 0,6 Z"
                                                  StrokeLineJoin="Miter" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <Border x:Name="Selection" Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="0" Padding="{TemplateBinding Padding}">
                            <Grid>
                                <Button x:Name="Header"
                                        ClickMode="Hover"
                                        Background="{x:Null}"
                                        Foreground="{TemplateBinding Foreground}"
                                        TextElement.Foreground="{TemplateBinding Foreground}"
                                        Cursor="{TemplateBinding Cursor}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Margin="0"
                                        IsTabStop="False">
                                    <Button.Template>
                                        <ControlTemplate TargetType="Button">
                                            <Grid Background="{TemplateBinding Background}">
                                                <ContentPresenter x:Name="Content"
                                                                  Cursor="{TemplateBinding Cursor}"
                                                                  Content="{TemplateBinding Content}"
                                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                  HorizontalAlignment="Left"
                                                                  Margin="0" />
                                            </Grid>
                                        </ControlTemplate>
                                    </Button.Template>
                                    <Button.Content>
                                        <ContentPresenter Content="{TemplateBinding Header}"
                                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                          Margin="0" />
                                    </Button.Content>
                                </Button>
                            </Grid>
                        </Border>

                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Visibility="Collapsed" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource ControlNoHover}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.BackgroundKey}}" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.BackgroundColorKey}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}" />
    </Style>

    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource ControlNoHover}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.BackgroundKey}}" />
        <Setter Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.BackgroundColorKey}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Grid Background="{TemplateBinding Background}"
                          TextElement.Foreground="{TemplateBinding Foreground}">
                        <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          HorizontalAlignment="Stretch"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.HotTrackKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.HotTrackTextKey}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ListBoxItemSelectedKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ListBoxItemSelectedTextKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Static l:ModernStyles.ThemedDialogCheckBoxStyleKey}}"/>

    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static l:ModernStyles.ThemedDialogRadioButtonStyleKey}}"/>

    <Style TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowBackgroundKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}" Opacity="1.0">
                        <ContentPresenter Opacity="{TemplateBinding Opacity}"
                                          Content="{TemplateBinding Content}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Focusable="False"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowBackgroundHoverKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowHoverKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowBackgroundPressedKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowPressedKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.56" />
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowBackgroundDisabledKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarArrowDisabledKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarThumbBackgroundKey}}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarThumbBackgroundHoverKey}}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarThumbBackgroundPressedKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ScrollBarBackgroundKey}}" />
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                            <RowDefinition Height="1E-05*" />
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                        </Grid.RowDefinitions>
                        <RepeatButton x:Name="PART_LineUpButton" Command="ScrollBar.LineUpCommand" IsEnabled="{TemplateBinding IsMouseOver}">
                            <Path Style="{StaticResource IconPath}"
                                  Data="F1M16,18.3112487792969L27.203125,29.2956237792969 27.203125,36.8424987792969 16,26.1393737792969 4.796875,36.8424987792969 4.796875,29.2956237792969 16,18.3112487792969z"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageUpCommand" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageDownCommand" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="ScrollBar.LineDownCommand" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2">
                            <Path Style="{StaticResource IconPath}"
                                  Data="F1M4.796875,16.1237487792969L16,26.8268737792969 27.203125,16.1237487792969 27.203125,23.6706237792969 16,34.6549987792969 4.796875,23.6706237792969 4.796875,16.1237487792969z"/>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                    <ColumnDefinition Width="1E-05*" />
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
                                </Grid.ColumnDefinitions>
                                <RepeatButton x:Name="PART_LineLeftButton" Command="ScrollBar.LineLeftCommand" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Path Style="{StaticResource IconPath}"
                                          Data="F1M17.71875,12.1237487792969L25.265625,12.1237487792969 14.5625,23.3268737792969 25.265625,34.5299987792969 17.71875,34.5299987792969 6.734375,23.3268737792969 17.71875,12.1237487792969z" />
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageLeftCommand" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageRightCommand" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="ScrollBar.LineRightCommand" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Path Style="{StaticResource IconPath}"
                                          Data="F1M6.734375,12.1237487792969L14.28125,12.1237487792969 25.265625,23.3268737792969 14.28125,34.5299987792969 6.734375,34.5299987792969 17.4375,23.3268737792969 6.734375,12.1237487792969z" />
                                </RepeatButton>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="OverridesDefaultStyle" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="templateRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               Grid.ColumnSpan="2"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               Margin="1"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                               Placement="Bottom">
                            <Border x:Name="DropDownBorder"
                                    BorderBrush="{DynamicResource {x:Static l:ModernStyles.ComboBoxPopupBorderKey}}"
                                    BorderThickness="1"
                                    Background="{DynamicResource {x:Static l:ModernStyles.ComboBoxPopupBackgroundKey}}"
                                    TextElement.Foreground="{DynamicResource {x:Static l:ModernStyles.ComboBoxPopupForegroundKey}}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="OpaqueRect"
                                                       Fill="{Binding Background, ElementName=DropDownBorder}"
                                                       Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                                       Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="toggleButton"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      Background="{TemplateBinding Background}"
                                      Foreground="{TemplateBinding Foreground}"
                                      TextElement.Foreground="{TemplateBinding Foreground}"
                                      Grid.ColumnSpan="2"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True" />
                                    <Setter Property="IsTabStop" Value="False" />
                                    <Setter Property="Focusable" Value="False" />
                                    <Setter Property="ClickMode" Value="Press" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border x:Name="templateRoot"
                                                        Background="{TemplateBinding Background}"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}">
                                                    <Border x:Name="splitBorder"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="1"
                                                            HorizontalAlignment="Right"
                                                            Margin="0"
                                                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                        <Path x:Name="Arrow"
                                                              Data="F1M0,0L2.667,2.66665 5.3334,0 5.3334,-1.78168 2.6667,0.88501 0,-1.78168 0,0z"
                                                              Fill="{TemplateBinding Foreground}"
                                                              HorizontalAlignment="Center"
                                                              Margin="0"
                                                              VerticalAlignment="Center" />
                                                    </Border>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="False">
                                                        <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ItemTemplate}"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsHitTestVisible="False"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                    <Setter Property="Foreground" Value="{Binding Foreground,RelativeSource={RelativeSource AncestorType=ComboBox}}" />
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsEditable" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderHoverKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundHoverKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ControlForegroundHoverKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.ControlForegroundHoverKey}}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95" />
                        </Trigger>
                        <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                            <Setter Property="Canvas.Top"
                                    TargetName="OpaqueRect"
                                    Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                            <Setter Property="Canvas.Left"
                                    TargetName="OpaqueRect"
                                    Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundKey}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.ControlBorderPressedKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HelpText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.GrayTextKey}}" />
        <Setter Property="Padding" Value="8 0 0 5" />
    </Style>

    <Style TargetType="{x:Type wpf:LabelledControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0 0 0 8" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type wpf:LabelledControl}}}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Label Grid.Row="0"
                               Content="{Binding Title}"
                               Target="{Binding ElementName=Content}"
                               Foreground="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}"/>
                        <TextBlock Grid.Row="1" Text="{Binding HelpText}" Style="{StaticResource HelpText}" Name="HelpText" />
                        <ContentPresenter Grid.Row="2" Content="{Binding Content}" Margin="3" Name="Content"
                                          AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}"
                                          AutomationProperties.HelpText="{Binding HelpText}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf:LabelledControl.HasHelpText" Value="False">
                            <Setter TargetName="HelpText" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type wpf:LabelledButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0 0 0 8" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ControlTemplate.Resources>
                        <Style x:Key="HelpText" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.GrayTextKey}}" />
                            <Setter Property="Padding" Value="8 0 0 5" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type wpf:LabelledButton}}}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Button Grid.Column="0" Grid.Row="0" Grid.RowSpan="2"
                                Name="Content"
                                Margin="3"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                Content="{Binding Content}"
                                Command="{Binding Command}"
                                CommandParameter="{Binding CommandParameter}"
                                CommandTarget="{Binding CommandTarget}"
                                AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}"
                                AutomationProperties.HelpText="{Binding HelpText}" />
                        <Label Grid.Column="1" Grid.Row="0"
                               Content="{Binding Title}"
                               Target="{Binding ElementName=Content}"
                               Foreground="{DynamicResource {x:Static l:ModernStyles.ForegroundKey}}" />
                        <TextBlock Grid.Column="1" Grid.Row="1"
                                   Text="{Binding HelpText}"
                                   Style="{StaticResource HelpText}"
                                   Name="HelpText" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf:LabelledButton.HasHelpText" Value="False">
                            <Setter TargetName="HelpText" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BrowseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinWidth" Value="{Binding RelativeSource={RelativeSource Self},Path=ActualHeight}" />
        <Setter Property="Margin" Value="6 0 0 0" />
        <Setter Property="Content" Value="..." />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="BrowseFolderButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BrowseButton}">
        <Setter Property="Command" Value="{x:Static wpf:Commands.BrowseFolder}" />
        <Setter Property="AutomationProperties.HelpText">
            <Setter.Value>
                Opens a dialog to browse for a folder.
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BrowseOpenFileButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BrowseButton}">
        <Setter Property="Command" Value="{x:Static wpf:Commands.BrowseOpenFile}" />
        <Setter Property="AutomationProperties.HelpText">
            <Setter.Value>
                Opens a dialog to browse for an existing file.
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BrowseSaveFileButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BrowseButton}">
        <Setter Property="Command" Value="{x:Static wpf:Commands.BrowseSaveFile}" />
        <Setter Property="AutomationProperties.HelpText">
            <Setter.Value>
                Opens a dialog to select a location to save a file.
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type wpf:ConfigurationTextBoxWithHelp}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:ConfigurationTextBoxWithHelp}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="auto" SharedSizeGroup="ConfigurationBrowseButtonColumn" />
                        </Grid.ColumnDefinitions>

                        <TextBox Grid.Column="0"
                                 x:Name="PART_TextBox"
                                 MinHeight="29"
                                 VerticalAlignment="Stretch"
                                 Style="{StaticResource {x:Type TextBox}}"
                                 AutomationProperties.AutomationId="{TemplateBinding AutomationProperties.AutomationId}"
                                 AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}"
                                 AutomationProperties.HelpText="{TemplateBinding HelpText}"
                                 AutomationProperties.IsRequiredForForm="{TemplateBinding IsRequiredForForm}"
                                 AutomationProperties.LabeledBy="{TemplateBinding AutomationProperties.LabeledBy}"
                                 IsReadOnly="{Binding IsReadOnly,Mode=OneWay,RelativeSource={RelativeSource TemplatedParent}}"
                                 Text="{Binding Text,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}">
                        </TextBox>

                        <TextBlock Grid.Column="0"
                                   x:Name="PART_Watermark"
                                   Foreground="{DynamicResource {x:Static l:ModernStyles.GrayTextKey}}"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   Margin="4 0 0 0"
                                   IsHitTestVisible="False"
                                   Visibility="Hidden"
                                   Text="{TemplateBinding Watermark}" />

                        <Button Grid.Column="1"
                                x:Name="PART_BrowseButton"
                                Margin="10 0 0 0"
                                MinHeight="29"
                                VerticalAlignment="Center"
                                Style="{TemplateBinding BrowseButtonStyle}"
                                ToolTip="{TemplateBinding BrowseAutomationName}"
                                AutomationProperties.Name="{TemplateBinding BrowseAutomationName}"
                                CommandParameter="{TemplateBinding BrowseCommandParameter}"
                                CommandTarget="{Binding ElementName=PART_TextBox}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_TextBox" Property="Text" Value="">
                            <Setter TargetName="PART_Watermark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="PART_TextBox" Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_BrowseButton" Property="Visibility" Value="Collapsed" />
                            <!-- ControlForegroundDisabledKey does not have enough contrast, use GrayTextKey for now />-->
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.GrayTextKey}}" />
                            <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundDisabledKey}}" />
                            <Setter TargetName="PART_TextBox" Property="img:ImageThemingUtilities.ImageBackgroundColor" Value="{DynamicResource {x:Static l:ModernStyles.ControlBackgroundDisabledColorKey}}" />
                        </Trigger>
                        <Trigger SourceName="PART_BrowseButton" Property="Style" Value="{x:Null}">
                            <Setter TargetName="PART_BrowseButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type wpf:ConfigurationComboBoxWithHelp}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:ConfigurationComboBoxWithHelp}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="auto" SharedSizeGroup="ConfigurationBrowseButtonColumn" />
                        </Grid.ColumnDefinitions>

                        <ComboBox Grid.Column="0"
                                  Style="{DynamicResource {x:Static l:ModernStyles.ThemedDialogComboBoxStyleKey}}"
                                  x:Name="PART_ComboBox"
                                  IsEditable="False"
                                  MinHeight="29"
                                  VerticalAlignment="Center"
                                  ItemsSource="{TemplateBinding Values}"
                                  SelectedValue="{Binding Value,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                  IsTextSearchEnabled="True"
                                  IsTextSearchCaseSensitive="False"
                                  AutomationProperties.AutomationId="{TemplateBinding AutomationProperties.AutomationId}"
                                  AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}"
                                  AutomationProperties.HelpText="{TemplateBinding HelpText}"
                                  AutomationProperties.IsRequiredForForm="{TemplateBinding IsRequiredForForm}"
                                  AutomationProperties.LabeledBy="{TemplateBinding AutomationProperties.LabeledBy}">
                        </ComboBox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter"/>
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>


    <Geometry x:Key="Checkmark">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>

    <Style x:Key="MenuScrollButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}" >
        <Setter Property="ClickMode" Value="Hover"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="templateRoot"
                        SnapsToDevicePixels="true"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1">
                        <ContentPresenter
                            Margin="6"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuScrollViewerStyle" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Column="0"
                            Grid.Row="1">
                            <ScrollContentPresenter
                                Margin="{TemplateBinding Padding}"
                                CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        </Border>
                        <RepeatButton
                            Grid.Column="0"
                            Grid.Row="0"
                            Style="{StaticResource MenuScrollButton}"
                            Command="{x:Static ScrollBar.LineUpCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="false">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="0" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                Data="{StaticResource UpArrow}"
                                Fill="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                        </RepeatButton>
                        <RepeatButton
                            Grid.Column="0"
                            Grid.Row="2"
                            Style="{StaticResource MenuScrollButton}"
                            Command="{x:Static ScrollBar.LineDownCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="false">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="100" Converter="{StaticResource MenuScrollingVisibilityConverter}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                Data="{StaticResource DownArrow}"
                                Fill="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticSeparatorBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticSeparatorBrushKey}}"/>
        <Setter Property="MinHeight" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Margin="30,0,0,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThemedContextMenu" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticBackgroundBrushKey}}"/>
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticBorderBrushKey}}"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="Grid.IsSharedSizeScope"
                Value="true"/>
        <Setter Property="HasDropShadow"
                Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="ContextMenuBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Name="ContextMenuScrollViewer"
                                        Grid.ColumnSpan="2" Margin="1,0"
                                        Style="{StaticResource MenuScrollViewerStyle}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Height="{Binding ElementName=ContextMenuBorder,Path=ActualHeight}"
                                        Width="{Binding ElementName=ContextMenuBorder,Path=ActualWidth}"
                                        Fill="{Binding ElementName=ContextMenuBorder,Path=Background}" />
                                </Canvas>
                                <!-- Separator vertical line was removed from here -->
                                <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Padding}"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="ContextMenuScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false" >
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Top"
                                    Value="{Binding ElementName=ContextMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Left"
                                    Value="{Binding ElementName=ContextMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticBackgroundBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="true">
                        <ItemsPresenter 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3" />
                <Path x:Name="GlyphPanel"
                    Data="{StaticResource Checkmark}"
                    FlowDirection="LeftToRight"
                    Margin="3"
                    Visibility="Collapsed"
                    VerticalAlignment="Center"
                    Fill="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                <ContentPresenter
                    Grid.Column="1"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBackgroundBrushKey}}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBorderBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
                <Setter TargetName="GlyphPanel" Property="Fill" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightDisabledBackgroundBrushKey}}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightDisabledBorderBrushKey}}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3"/>
                <Path x:Name="GlyphPanel"
                    Data="{StaticResource Checkmark}"
                    FlowDirection="LeftToRight"
                    Margin="3"
                    Visibility="Collapsed"
                    VerticalAlignment="Center"
                    Fill="{TemplateBinding Menu.Foreground}" />
                <ContentPresenter
                    Grid.Column="1"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Popup x:Name="PART_Popup"
                    AllowsTransparency="true"
                    Focusable="false"
                    IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=templateRoot}" >
                    <Border x:Name="SubMenuBorder"
                        Background="{DynamicResource {x:Static l:ModernStyles.MenuStaticBackgroundBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static l:ModernStyles.MenuStaticBorderBrushKey}}"
                        BorderThickness="1"
                        Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer"
                            Style="{StaticResource MenuScrollViewerStyle}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                        Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                        Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                </Canvas>
                                <!-- Separator vertical line was removed from here -->
                                <ItemsPresenter x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    KeyboardNavigation.TabNavigation="Cycle"
                                    Grid.IsSharedSizeScope="true"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBackgroundBrushKey}}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBorderBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
                <Setter TargetName="GlyphPanel" Property="Fill" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false" >
                <Setter TargetName="OpaqueRect"  Property="Canvas.Top"  Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3"/>
                <Border x:Name="GlyphPanel"
                    Visibility="Hidden"
                    Height="22"
                    Width="22"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Background="{DynamicResource {x:Static l:ModernStyles.MenuItemSelectedBackgroundBrushKey}}"
                    BorderBrush="{DynamicResource {x:Static l:ModernStyles.MenuItemSelectedBorderBrushKey}}"
                    BorderThickness="1"
                    ClipToBounds="False"
                    Margin="-1,0,0,0">
                    <Path x:Name="Glyph"
                        Data="{StaticResource Checkmark}"
                        FlowDirection="LeftToRight"
                        Height="11"
                        Width="10"
                        Fill="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                </Border>
                <ContentPresenter x:Name="menuHeaderContainer"
                    Grid.Column="2"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <TextBlock x:Name="menuGestureText"
                    Grid.Column="4"
                    Text="{TemplateBinding InputGestureText}"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    VerticalAlignment="Center"
                    Opacity="0.7" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBackgroundBrushKey}}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBorderBrushKey}}" />
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static vsui:CommonDocumentColors.ListItemTextSelectedBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
                <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightDisabledBackgroundBrushKey}}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightDisabledBorderBrushKey}}" />
            </MultiTrigger>            
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3"/>
                <Border x:Name="GlyphPanel"
                    BorderThickness="1"
                    Height="22"
                    Width="22"
                    Visibility="Hidden"
                    VerticalAlignment="Center"
                    Margin="-1,0,0,0"
                    BorderBrush="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBorderBrushKey}}"
                    Background="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBackgroundBrushKey}}">
                    <Path x:Name="Glyph"
                        Data="{DynamicResource Checkmark}"
                        FlowDirection="LeftToRight"
                        Height="11"
                        Width="9"
                        Fill="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                </Border>
                <ContentPresenter
                    Grid.Column="2"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <TextBlock
                    Grid.Column="4"
                    Text="{TemplateBinding InputGestureText}"
                    VerticalAlignment="Center"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    Opacity="0.7" />
                <Path x:Name="RightArrow"
                    Grid.Column="5"
                    Data="{StaticResource RightArrow}"
                    Margin="10,0,0,0"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Left"
                    Fill="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                <Popup x:Name="PART_Popup"
                    AllowsTransparency="true"
                    Focusable="false"
                    IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                    Placement="Right"
                    HorizontalOffset="-2"
                    VerticalOffset="-3">
                    <Border x:Name="SubMenuBorder"
                        Background="{DynamicResource {x:Static l:ModernStyles.MenuStaticBackgroundBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static l:ModernStyles.MenuStaticBorderBrushKey}}"
                        BorderThickness="1"
                        Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer"
                            Style="{StaticResource MenuScrollViewerStyle}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                        Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                        Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                </Canvas>
                                <!-- Separator vertical line was removed from here -->
                                <ItemsPresenter x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    KeyboardNavigation.TabNavigation="Cycle"
                                    Grid.IsSharedSizeScope="true"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBackgroundBrushKey}}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuItemHighlightBorderBrushKey}}" />
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static vsui:CommonDocumentColors.ListItemTextSelectedBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
                <Setter TargetName="Glyph" Property="Fill" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
                <Setter TargetName="RightArrow" Property="Fill" Value="{DynamicResource {x:Static l:ModernStyles.MenuDisabledForegroundBrushKey}}" />
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false" >
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ThemedMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource SubmenuItemTemplateKey}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                <Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplateKey}" />
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticBackgroundBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticBorderBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.MenuStaticForegroundBrushKey}}" />
                <Setter Property="Template" Value="{StaticResource TopLevelItemTemplateKey}" />
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplateKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HyperlinkButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="0"
                        StrokeThickness="1"
                        Stroke="{DynamicResource {x:Static vsui:CommonDocumentColors.PageTextBrushKey}}"
                        StrokeDashArray="1 2"
                        SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type vsui:HyperlinkButton}">
        <Setter Property="Margin" Value="0,3" />
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="{DynamicResource VsFont.EnvironmentFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource VsFont.EnvironmentFontSize}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:CommonDocumentColors.HyperlinkBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource HyperlinkButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <AccessText Text="{TemplateBinding Content}" x:Name="TextInsideButton" Background="{TemplateBinding Background}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:CommonDocumentColors.HyperlinkPressedBrushKey}}"/>
                            <Setter Property="TextBlock.TextDecorations" TargetName="TextInsideButton" Value="Underline" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsui:CommonDocumentColors.HyperlinkHoverBrushKey}}"/>
                            <Setter Property="TextBlock.TextDecorations" TargetName="TextInsideButton" Value="Underline" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Static l:ModernStyles.LabelEnvironmentBoldStyleKey}}">
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.WindowPanelTextBrushKey}}" />
        <Setter Property="Margin" Value="0 0 0 3"/>
        <Setter Property="Padding" Value="0 0 0 0"/>
    </Style>

    <Style x:Key="ModernDialogTitleTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Static l:ModernStyles.TextBlockEnvironment310PercentFontSizeStyleKey}}">
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.HeaderTextBrushKey}}"/>
    </Style>

    <Style x:Key="ModernDialogStyle" TargetType="Window">
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="FontFamily" Value="{DynamicResource VsFont.EnvironmentFontFamily}"/>
        <Setter Property="FontSize" Value="{DynamicResource VsFont.EnvironmentFontSize}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static l:ModernStyles.WindowPanelBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static l:ModernStyles.WindowPanelTextBrushKey}}" />
        <Setter Property="theming:ImageThemingUtilities.ImageBackgroundColor" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={StaticResource BrushToColorConverter}}" />
        <Setter Property="img:ImageThemingUtilities.ThemeScrollBars" Value="True" />
    </Style>
</ResourceDictionary>