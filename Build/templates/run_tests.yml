steps:
  # Install different python versions
  - template: ./install_python.yml
    parameters:
      pythonVersion: '3.9.13' # Last version with an installer
  - template: ./install_python.yml
    parameters:
      pythonVersion: '3.10.11' # Last version with an installer
  - template: ./install_python.yml
    parameters:
      pythonVersion: '3.11.9' # Last version with an installer
  - template: ./install_python.yml
    parameters:
      pythonVersion: '3.12.7'
      outputVar: InstallPython312
  - template: ./install_python.yml
    parameters:
      pythonVersion: '3.13.0'
  
  # Find the environment variable for the install of 3.12
  - powershell: |
      $suffix = '_INSTALLPYTHON312'
      $envVars = Get-ChildItem Env:

      foreach ($envVar in $envVars) {
        if ($envVar.Name.EndsWith($suffix)) {
          echo "##vso[task.setvariable variable=PYTHON_INTERPRETER]$($envVar.Value)\python.exe"
          break
        }
      }  
    displayName: 'Set PYTHON_INTERPRETER variable'

  - task: PythonScript@0
    displayName: 'Test python path'
    env:
      SYSTEM_ACCESSTOKEN: $(DropToken)
    inputs:
      scriptSource: 'inline' # 'filePath' | 'inline'. Required. Script source. Default: filePath.
      script: |
        import sys
        print(sys.executable)
        print(sys.version)
        print(sys.path)
      workingDirectory: $(Build.SourcesDirectory)
      failOnStderr: true
      pythonInterpreter: $(PYTHON_INTERPRETER)

  # Build the product
  - task: MSBuild@1
    displayName: 'Build product'
    inputs:
      solution: $(Build.SourcesDirectory)/Python/Product/dirs.proj
      msbuildVersion: $(MsBuildVersion)
      platform: $(Platform)
      configuration: $(BuildConfiguration)
      msbuildArguments: '/p:VSTarget=$(VSTarget) /bl:$(Build.SourcesDirectory)\logs\BuildProduct.binlog'

  # Restore the glass binaries from cache
  - task: CacheBeta@2
    displayName: 'Restore glass binaries from cache'
    inputs:
      key: 'glass'
      path: '$(Build.BinariesDirectory)\raw\binaries'
      cacheHitVar: 'CACHE_RESTORED'

  # Run the glass tests
  - task: PythonScript@0
    displayName: 'Run Glass tests'
    inputs:
      scriptSource: 'filePath' # 'filePath' | 'inline'. Required. Script source. Default: filePath.
      scriptPath: $(Build.SourcesDirectory)/Build/run_glass.py
      arguments: '--buildOutput $(Build.BinariesDirectory)\raw\binaries'
      workingDirectory: $(Build.SourcesDirectory)
      failOnStderr: true
      pythonInterpreter: $(PYTHON_INTERPRETER)

  # Upload the trx file as a test result
  - task: PublishTestResults@2
    condition: always() # Always run this step, even if the previous step fails
    displayName: 'Publish Glass test results'
    inputs:
      testResultsFiles: '$(Build.SourcesDirectory)/TestResults/*.trx'
      testRunTitle: 'Glass Tests'
      testResultsFormat: 'VSTest'
      failTaskOnFailedTests: true
