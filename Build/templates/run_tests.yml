steps:

  # Build the product
  - task: MSBuild@1
    displayName: 'Build full product'
    inputs:
      solution: $(Build.SourcesDirectory)/Python/dirs.proj
      msbuildVersion: $(MsBuildVersion)
      platform: $(Platform)
      configuration: $(BuildConfiguration)
      msbuildArguments: '/p:VSTarget=$(VSTarget) /bl:$(Build.SourcesDirectory)\logs\BuildProduct.binlog'

  - task: AzureCLI@2
    displayName: 'Acquire an AAD token from a User-Assigned Managed Identity and save it as secret variable DropToken'
    inputs:
      azureSubscription: 'PylanceSecureVsIdePublishWithManagedIdentity'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # if this fails, check out this bash script that includes diagnostics:
        # https://gist.github.com/johnterickson/19f80a3e969e39f1000d118739176e62
        
        # Note that the resoruce is specified to limit the token to Azure DevOps
        $token = az account get-access-token --query accessToken --resource 499b84ac-1321-427f-aa17-267ca6975798 -o tsv
        Write-Host "##vso[task.setvariable variable=DropToken;issecret=true]$token"      

  # Install different python versions
  #- task: UsePythonVersion@0
  #  inputs:
  #    versionSpec: '3.9' # string. Required. Version spec. Default: 3.x.
      #disableDownloadFromRegistry: false # boolean. Disable downloading releases from the GitHub registry. Default: false.
      #allowUnstable: false # boolean. Optional. Use when disableDownloadFromRegistry = false. Allow downloading unstable releases. Default: false.
      #githubToken: # string. Optional. Use when disableDownloadFromRegistry = false. GitHub token for GitHub Actions python registry. 
  #    addToPath: false # boolean. Add to PATH. Default: true.
    # Advanced
  #    architecture: 'x64' # 'x86' | 'x64'. Required. Architecture. Default: x64.
  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: '3.10'
  #     addToPath: false
  #     architecture: 'x64'
  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: '3.11'
  #     addToPath: false
  #     architecture: 'x64'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.12'
      addToPath: true # This is the version we'll use to run the scripts below
      architecture: 'x64'
  # - task: UsePythonVersion@0
  #   inputs:
  #     versionSpec: '3.13'
  #     addToPath: false
  #     architecture: 'x64'  

  # Setup the glass test folder
  - task: PythonScript@0
    displayName: 'Setup glass test folder'
    env:
      SYSTEM_ACCESSTOKEN: $(DropToken)
    inputs:
      scriptSource: 'filePath' # 'filePath' | 'inline'. Required. Script source. Default: filePath.
      scriptPath: $(Build.SourcesDirectory)/Build/setup_glass.py
      arguments: '--authTokenVariable SYSTEM_ACCESSTOKEN --buildOutput $(Build.BinariesDirectory)\raw\binaries'
      workingDirectory: $(Build.SourcesDirectory)
      failOnStderr: true

  # Run the glass tests
  - task: PythonScript@0
    displayName: 'Run Glass tests'
    inputs:
      scriptSource: 'filePath' # 'filePath' | 'inline'. Required. Script source. Default: filePath.
      scriptPath: $(Build.SourcesDirectory)/Build/run_glass.py
      workingDirectory: $(Build.SourcesDirectory)
      failOnStderr: true

  # Upload the trx file as a test result
  - task: PublishTestResults@2
    condition: always() # Always run this step, even if the previous step fails
    displayName: 'Publish Glass test results'
    inputs:
      testResultsFiles: '$(Build.SourcesDirectory)/TestResults/*.trx'
      testRunTitle: 'Glass Tests'
      testRunSystem: 'VSTest'
      failTaskOnFailedTests: true
      mergeTestResults: true
      testRunAttachmentsEnabled: true
      testRunAttachmentsDirectory: '$(Build.SourcesDirectory)/TestResults'      